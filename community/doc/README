*******************************************************************************

README file for Ultralog Communities release

Date: 6/12/02

*******************************************************************************

I. SUPPORTED CAPABILITIES:
   -----------------------

a. Automatic assignment of agents to initial communities during startup.  The
   CommunityPlugin reads the initial community structure from the Configuration
   database and makes the appropriate entries in the Yellow Pages Community
   context.

b. The following capabilities are supported in the commnuity blackboard
   publish/subscribe interface:

   1) Get a roster for a named community.  This may be done as a one-shot
      request or may be retrieved with automatic updates when the community
      membership changes.

   2) Get a list of communities of which a named agent is currently a
      member.

   3) Get a list of all communities currently listed in Yellow Pages context.

   4) Get a list of all agents in a community that support a specified role.

   5) Get a list of all roles supported by a specified agent.

   6) Join a community.  An agent may join an arbitrary community after startup.
      The join operation does not currently provide agent
      authentication/authorization by the community to be joined.

   7) Leave a community.  An agent may leave a community of which it is a member.
      The leave operation does not currently provide agent
      authentication/authorization by the parent community.

   8) Uses the new ABA/Relay capability in 9.2 to send CommunityChangeNotification
      messages between CommunityPlugins in different agents.

c. The following capabilities are supported in the CommunityService interface.

   1) Create a community.

   2) Test for existence of a community.

   3) Get a list of all communities contained in the community context.

   4) Add an entity/agent to a community.

   5) Remove an entity/agent from a community.

   6) Get a community roster.

   7) Get a list of communities of which a named entity is a member.

   8) Get a list of roles that a named entity supports.

   9) Add an agent as a ChangeListeners for a community.  When an agent is
      registered as an ChangeListener it will receive notifications of changes
      in the Community state maintained in the Yellow pages.

   10) Remove an agent as an ChangeListenersested party for a community.

   11) Get a list of all ChangeListeners agents for a named community.

   12) Support for arbitrary searches of the community name server context using
       attribute id/value pairs.  All community state information is defined
       using standard JNDI atttributes.  The CommunityService "search" methods
       accept standard JNDI search filters and will return community or
       entity names that satisfy the search criteria.

   13) Support for local caching of community information in Name Server.
       Caching is activated by default.  To deactivate use the parameter
       "cache=off" with the CommunityServiceComponent.


II.  SETUP
     -----

a. The community system requires 3 separate components to operate.  Each must
   be loaded for the capabilities described above to be performed.

   1) Community Domain.  The CommunityDomain is used to create ABA/Relay objects
      for transmitting CommunityChangeNotifications between CommunityPlugins
      in different agents.  The CommunityDomain is loaded by default as it has
      been defined in an "LDMDomains.ini" file using the following syntax:
      community=org.cougaar.community.CommunityDomain

   2) Community Service.  The CommunityService provider is installed by the
      CommunityServiceComponent.  The CommunityServiceComponent is loaded automatically
      for each agent.  

      The CommunityServiceComponent uses two optional parameters that can be 
      defined as System properties.

      - When running using ".ini" files, to load community configuration data from 
        a specified XML file rather than the default 'communities.xml' file, specify the
        System parameter on the command line as follows: 
        -Dorg.cougaar.community.configfile="yourfilename.xml"
         
        The file (either communities.xml or a specified xml file is loaded from the 
        cougaar config path.

      - To turn caching at the CommunityService level off, specify the 
        System parameter on the command line with the value "off" as follows:
        -Dorg.cougaar.community.caching="off"

        The value "off" will deactivate local caching of community
        information in Name Server.  By default this capability is active.
        This parameter can be set whether running using ".ini" files or
        using CSMART.

   3) Community Plugin.  The community plugin is required to perform assignment
      of agents to their startup communities and to provide the blackboard
      Publish/Subscribe interface.

      - When running using the configuration database in CSMART, this plugin is 
        loaded automatically in each agent in the initial society.  However, for 
        NodeAgents and additional agents added using recipes, this plugin is not 
        loaded by default.  Instead, a "Specific Insertion Recipe" must be created
        that consists of the following parameters:

        Class Name = org.cougaar.community.CommunityPlugin
        Component Name = org.cougaar.community.CommunityPlugin
        Number of Arguments = 0
        Target Component Selection Query = [user created query]
        Type of Insertion = plugin

        Note that you must create a specific query to insert this plugin into the
        newly created agent.

      - When running using ".ini" files the following entry must be created in
        each agent-level ".ini" file in the "[ Plugins ]" section:
        plugin = org.cougaar.community.CommunityPlugin


III.  COMMUNITY CONFIGURATION
      -----------------------

During startup agents are assigned to their initial communities.  When running in 
CSMART, the definition of these startup communities and associated entities is retrieved 
from the Cougaar configuration database tables "community_attribute" and
"community_entity_attribute".  Alternately, if running using ".ini" files, a startup 
community configuration data may be obtained from the default XML file "communities.xml" located 
in the config path or by a particular xml file that is specifed by a System parameter on the 
command line read by CommunityServiceComponent.  (See above.) 

a. Community configuration attributes.  The creation and use of communities is
   based on the definition of attribute id/value pairs.

   1) DB table: community_attribute  -  This table defines the community
      attributes.  At present there are 2 community-level attributes that convey
      special meaning.  These attributes and associated values are listed below.

      Attribute        Value      Meaning
      ---------------- ---------- -------------------------------------
      CommunityType    Domain     Defines a logistics community.
                       Robustness Identifies the agents that are
                                  associated with a restart community.
      CommunityManager            Not currently used.  Will eventually be used
                                  to identify one or more agents that manage
                                  community membership.   The CommunityManager
                                  agent will grant/deny requests to join or
                                  leave a community.

   2) DB table: community_entity_attribute  -  This table identifies the
      entities (agents or other communties) that are associated with a
      community.  The table identifies the community name, entity name, and
      entity attributes.  The following table identifies the entity attributes
      that have special meaning to the CommunityService.

      Attribute        Value      Meaning
      ---------------- ---------- -------------------------------------
      Role             Member     Identifies an entity (agent or another
                                  community as a member of the parent
                                  community.
                       Associate  Not currently used.  Identifies an agent 
                                  as an associate of a community.
                                  For instance, the ManagementAgent
                                  in a robustness community would generally
                                  have this community role attribute.
      EntityType       Agent      Specifies that the entity is an Agent.
                       Community  Specifies that a named entity is another
                                  (nested) community.


IV. YELLOW PAGES VIEWER TOOL
    ------------------------

A GUI application is available for viewing the contents of the Yellow Pages.
This application is useful for testing the community software to verify
that appropriate entries have been entered into the yellow pages.  The
yellow pages viewer is provided by the class community.demo.YellowPagesViewer.
This viewer may be run using ant with the target "ypviewer".  The viewer
takes 3 optional arguments (host, port, agent) that define the location of the
agent that contains the YellowPagesServlet that provides an interface to the
yellow pages.

The yellow pages servlet must be loaded for the viewer to operate.

- When running in CSMART a "Servlet Group Insertion Recipe" must be used
  that includes the servlet "org.cougaar.community.test.YellowPagesServlet".

- When running using ".ini" files the following entry must be created in
  an agent-level ".ini" file in the "[ Plugins ]" section:
  plugin = org.cougaar.community.test.YellowPagesServlet


V. COMPILING THE COMMUNITY SOFTWARE
   --------------------------------

The community software is built using the ant build system.  The default ant
target will compile all java files and create a "communities.jar" file in
the root directory.


VI. TESTING THE COMMUNITY SOFTWARE
    ------------------------------

A set of automated tests is provided to verify the correct operation of the
community components.  The tests are implemented in a test plugin that
is run in a special test node/agent.  These automated tests may be run using
ant with the target "test".  Each test will print a test/fail result.


VII.  EXAMPLES AND DEMONSTRATIONS
      ---------------------------

The directory test/src/community/demo contains 2 plugins that test/demonstrate
basic community features.

- The JoinTestPlugin executes join and leave operations on the minitestconfig
  society.

- The RosterWatcherPlugin demonstrates the use of the "GET_ROSTER_WITH_UPDATES"
  capability.  In this example the plugin gets an initial version of the
  minitestconfig roster and requests automatic updates.  Each time an update
  is received the plugin will print the deltas from the previous version.

The example/demonstration plugins may be run in either a 1 node or 2 node
configuration.  To run as one node use the ant target "demo".  To run in a
two node configuration the ant targets "demo1" and "demo2" are invoked from
different terminals.  If the 2 node configuration is run from different
computers the applicable "alpreg.ini" file must of course be updated.


VIII.  ANT TARGETS
       -----------

A "build.xml" file is provided for use with the ant build system.  This build
file makes 2 assumptions:
  1) The COUGAAR_INSTALL_PATH environment variable is defined and,
  2) Ant is invoked from the root directory of the community distribution.

The following ant targets are available:

  build (default) : invokes the compile and jar targets
  compile         : compiles all java files into the classes directory
  jar             : generates the communities.jar file in the current directory
                    from the files in the classes directory tree
  javadoc         : generates javadoc files in the doc/api directory
  clean           : deletes all generated files in the classes and doc/api
                    directories
  zip             : creates a zip archive containing all source files
  test            : runs the automated community tests
  demo            : runs the demo agents/plugins on a single node
  demo1           : runs the demo agents with the RosterWatcher plugin on one
                    node
  demo2           : runs the demo agents with the JoinTestPlugin on one node
  ypviewer        : runs the Yellow Pages Viewer GUI utility
  minitestconfig  : runs a community-enabled version of the minitestconfig
                    society







